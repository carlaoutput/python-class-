#!/usr/bin/env python
from types import *
from math import *

class IntSet:
    def __init__(self): # inicializaci´on
      self.c = 0L
    def __str__(self): # impresi´on del resultado
        c = self.c
        s = "{ "
        i = 0
      while c != 0:
          j = 2**long(i)
          if c & j:
              s = s + str(i) + ’ ’
              c = c - j
          i = i + 1
      s = s + "}"
      return s
      
# insercion de un entero o de una lista de enteros

def insert(self, n):
    if type(n) != ListType:
        self.c = self.c | 2**long(n)
    else:
       for i in n:
            self.c = self.c | 2**long(i)
def __len__(self):
    c = self.c
    i = 0
    n = 0
while c != 0:
    j = 2**long(i)
    if c & j:
      c = c - j
      n = n + 1
    i = i + 1
return n

print "A intersecci´on B es", A&B
print "A \\ B es ", A-B

def __getitem__(self, i):
    return (self.c & 2**long(i)) != 0
def __setitem__(self, i, v):
    s = 2**long(i)
    self.c = self.c | s
    if v == 0:
        self.c = self.c ^ s
def __or__(self, right): # Uni´on
    R = IntSet()
    R.c = self.c | right.c
    return R
def __and__(self, right): # Intersecci´on
    R = IntSet()
    R.c = self.c & right.c
    return R
def __sub__(self, right): # Diferencia
    R = IntSet()
    R.c = self.c ^ (self.c & right.c)
    return R
    
if __name__ == "__main__":
    A = IntSet()
    A.insert(10)
    A.insert([2, 4, 32])
    print "Conjunto A:", A
    print "Long: ", len(A)
    print "¿Est´a el 2?",A[2], "¿Y el 3?", A[3]
    A[3] = 1; A[2] = 0
    print "¿Est´a el 2?",A[2], "¿Y el 3?", A[3]
    print "Conjunto A:", A
    B = IntSet()
    B.insert([3,7,9,32])
    print "B es", B
    print "A uni´on B es ", A|B
    print ((A|B) - (A&B)) - A




